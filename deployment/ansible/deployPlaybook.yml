---
- hosts: django_server

  collections:
      - community.docker
  become: true  # Assuming privilege escalation required
  gather_facts: true  # Enable fact gathering

  tasks:

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Create erpnetwork (if it doesn't exist)
      docker_network:
        name: erpnetwork
        state: present


    - name: Stop and remove existing djangoscherp-dev containers
      docker_container:
        state: absent
        name: django-erp
        force_kill: yes  # Forcefully stop container before removal (optional)
       
    - name: Build dynamic image tag
      set_fact:
        image_tag: "gitauwairimu/djangoscherp-dev:{{ lookup('env', 'GITHUB_RUN_ID') }}"  # Access CI_RUN_ID environment variable

    - name: Ensure container is running
      docker_container:
        name: django-erp
        image: "{{ image_tag }}"  # Use the constructed image_tag variable
        pull: true
        ports:
          - "80:8000"

    - name: Get all Docker images
      docker_image_facts:
      register: docker_images

    - name: Get running containers
      docker_container_info:
        name: "{{ item.name }}"
      loop: "{{ docker_containers.results }}"
      register: docker_containers

    - name: Find unused images
      set_fact:
        unused_images: "{{ docker_images.results | rejectattr('RepoTags', 'in', docker_containers.results | map(attribute='Image') | list ) }}"

    - name: Print unused images
      debug:
        msg: "Unused images: {{ unused_images }}"

    # - name: Get running Docker containers (using shell and piping)
    #   shell: ansible-galaxy collection install community.docker

    # - name: Get Docker images
    #   docker_images:
    #     name: "{{ image.name }}"
    #   register: docker_images

    # - name: Remove images starting with 'gitauwairimu/djangoscherp-dev'
    #   docker_image:
    #     name: "{{ item.name }}"
    #     state: absent
    #   loop: "{{ docker_images.results | selectattr('name', 'startswith', 'gitauwairimu/djangoscherp-dev') }}"


    # - name: Remove images starting with 'gitauwairimu/djangoscherp-dev'
    #   docker_image:
    #     name: "{{ image.name }}"
    #     state: absent
    #     loop: "{{ docker_images.results }}"
    #     when: image.name.startswith("gitauwairimu/djangoscherp-dev")
