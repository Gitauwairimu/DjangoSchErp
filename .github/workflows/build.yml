name: Django Build and Push Image

on:
  push:
    branches: [ s3, dev ] # Trigger on pushes to this/these branch(es)

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
    steps:
      - uses: actions/checkout@v3

      - name: Access secrets
        run: |
          DEBUG=${{ secrets.DEBUG }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          # ... access other secrets

      - name: Collectstatic
        run: |
          pip install -r requirements.txt
          python manage.py collectstatic --noinput

      - name: Build Docker image
        run: |
          docker build -t django-img .
          docker tag django-img gitauwairimu/djangoscherp-dev:$GITHUB_RUN_ID

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_DJANGOSCHERP_DEV_TOKEN }}

      - name: Push Docker image
        run: |
          docker push gitauwairimu/djangoscherp-dev:$GITHUB_RUN_ID

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'docker.io/gitauwairimu/djangoscherp-dev:${{ github.run_id }}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Add SSH key
  #       run: |
  #         echo "${{ secrets.PEM_KEY }}" >> /home/runner/work/DjangoSchErp/DjangoSchErp/termapp.pem
  #         chmod 600 /home/runner/work/DjangoSchErp/DjangoSchErp/termapp.pem  # Set appropriate permissions          

  #     - name: Install Ansible
  #       run: |
  #         sudo apt install ansible -y  # Install Ansible (replace with yum or dnf for other distributions)

  #     - name: Setup ssh
  #       shell: bash
  #       run: |
  #         service ssh status
  #         eval `ssh-agent -s`

  #     - name: Copy ansible.cfg
  #       shell: bash
  #       run: |
  #         sudo mkdir -p /etc/ansible
  #         sudo cp /home/runner/work/DjangoSchErp/DjangoSchErp/deployment/ansible/ansible.cfg /etc/ansible/ansible.cfg
  #         cp /home/runner/work/DjangoSchErp/DjangoSchErp/deployment/ansible/inventory ansible_inventory

  #     # - name: Run Ansible playbook
  #     #   uses: saubermacherag/ansible-playbook-docker-action@v1.4
  #     #   with:
  #     #     playbookName: '/home/runner/work/DjangoSchErp/DjangoSchErp/deployment/ansible/deployPlaybook.yml'
  #     #     inventoryFile: 'ansible_inventory'
  #     #     keyFile: "/home/runner/work/DjangoSchErp/DjangoSchErp/termapp.pem"
  #     #     verbosity: "vv"

  #     # - name: Run Ansible playbook
  #     #   uses: dawidd6/action-ansible-playbook@v2.5.0
  #     #   with:
  #     #     playbook: deployment/ansible/deployPlaybook.yml # path to your Ansible playbook
  #     #     directory: ./
  #     #     key: ${{ secrets.PEM_KEY }} # the ssh private key for ansible to use to connect to the servers, stored as "ansible_ssh_private_key" in the GitHub secrets
  #     #     inventory: /home/runner/work/DjangoSchErp/DjangoSchErp/deployment/ansible/inventory
  #     #     # inventory: ${{ secrets.ansible_inventory }} # the ansible inventory to use, stored as "ansible_inventory" in the GitHub secrets



  #     - name: Execute Ansible Playbook
  #       run: |
  #         ansible-playbook -i /home/runner/work/DjangoSchErp/DjangoSchErp/deployment/ansible/inventory deployment/ansible/deployPlaybook.yml


  GitOpsRepoUpdate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: GitOps Update
        run: |
          git clone https://Gitauwairimu:${{ secrets.REPO_PAT_DjangoSchErpGitOps }}@github.com/Gitauwairimu/DjangoSchErpGitOps.git
          cd DjangoSchErpGitOps
          sed -i "s|image: gitauwairimu.*|image: gitauwairimu/djangoscherp-dev:${GITHUB_RUN_ID}|g" deployment.yaml
          git config user.name "CharlesAUTO"
          git config user.email "automate@cloud101.dev"
          git add deployment.yaml
          git commit -m "Image Verson: Auto Update"
          git push origin main



  slack_success:
    needs:
      - GitOpsRepoUpdate
      - build
      - deploy
    name: Pass - Notify on Slack
    runs-on: ubuntu-latest
    steps:
      - uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "ch-djangoerp-cicd"
          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  slack_fail:
    needs:
      - GitOpsRepoUpdate
      - build
      - deploy
    name: Failed - Notify on Slack
    runs-on: ubuntu-latest
    if: failure() || cancelled()
    steps:
      - uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "ch-djangoerp-cicd"
          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
